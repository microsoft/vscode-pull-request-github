{
	"name": "vscode-pull-request-github",
	"displayName": "GitHub Pull Requests and Issues",
	"description": "Pull Request and Issue Provider for GitHub",
	"icon": "resources/icons/github_logo.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/Microsoft/vscode-pull-request-github"
	},
	"bugs": {
		"url": "https://github.com/Microsoft/vscode-pull-request-github/issues"
	},
	"enabledApiProposals": [
		"tokenInformation",
		"commentsResolvedState",
		"contribShareMenu",
		"treeItemCheckbox",
		"contribCommentPeekContext"
	],
	"version": "0.50.0",
	"publisher": "GitHub",
	"engines": {
		"vscode": "^1.72.0"
	},
	"categories": [
		"Other"
	],
	"extensionDependencies": [
		"vscode.github-authentication"
	],
	"activationEvents": [
		"*",
		"onCommand:github.api.preloadPullRequest",
		"onFileSystem:newIssue",
		"onFileSystem:pr",
		"onFileSystem:githubpr",
		"onFileSystem:review"
	],
	"browser": "./dist/browser/extension",
	"main": "./dist/extension",
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": true
		},
		"virtualWorkspaces": true
	},
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "GitHub Pull Requests",
			"properties": {
				"githubPullRequests.pullRequestTitle": {
					"deprecationMessage": "The pull request title now uses the same defaults as GitHub, and can be edited before create.",
					"type": "string",
					"enum": [
						"commit",
						"branch",
						"custom",
						"ask"
					],
					"enumDescriptions": [
						"Use the latest commit message",
						"Use the branch name",
						"Specify a custom title",
						"Ask which of the above methods to use"
					],
					"default": "ask",
					"description": "The title used when creating pull requests."
				},
				"githubPullRequests.pullRequestDescription": {
					"type": "string",
					"enum": [
						"template",
						"commit"
					],
					"enumDescriptions": [
						"Use a pull request template and commit description, or just use the commit description if no templates were found",
						"Use the latest commit message only"
					],
					"default": "template",
					"description": "The description used when creating pull requests."
				},
				"githubPullRequests.logLevel": {
					"type": "string",
					"enum": [
						"info",
						"debug",
						"off"
					],
					"default": "info",
					"description": "Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request."
				},
				"githubPullRequests.remotes": {
					"type": "array",
					"default": [
						"origin",
						"upstream"
					],
					"items": {
						"type": "string"
					},
					"markdownDescription": "List of remotes, by name, to fetch pull requests from."
				},
				"githubPullRequests.includeRemotes": {
					"type": "string",
					"enum": [
						"default",
						"all"
					],
					"default": "default",
					"deprecationMessage": "The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.",
					"description": "By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'."
				},
				"githubPullRequests.queries": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"label": {
								"type": "string",
								"description": "The label to display for the query in the Pull Requests tree"
							},
							"query": {
								"type": "string",
								"description": "The query used for searching pull requests."
							}
						}
					},
					"scope": "resource",
					"markdownDescription": "Specifies what queries should be used in the GitHub Pull Requests tree. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories \"Waiting For My Review\", \"Assigned To Me\" and \"Created By Me\". If you want to preserve these, make sure they are still in the array when you modify the setting.",
					"default": [
						{
							"label": "Waiting For My Review",
							"query": "is:open review-requested:${user}"
						},
						{
							"label": "Assigned To Me",
							"query": "is:open assignee:${user}"
						},
						{
							"label": "Created By Me",
							"query": "is:open author:${user}"
						}
					]
				},
				"githubPullRequests.defaultMergeMethod": {
					"type": "string",
					"enum": [
						"merge",
						"squash",
						"rebase"
					],
					"default": "merge",
					"description": "The method to use when merging pull requests."
				},
				"githubPullRequests.showInSCM": {
					"type": "boolean",
					"default": false,
					"deprecationMessage": "This setting is deprecated. Views can now be dragged to any location.",
					"description": "When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them."
				},
				"githubPullRequests.notifications": {
					"type": "string",
					"enum": [
						"pullRequests",
						"off"
					],
					"default": "off",
					"description": "If GitHub notifications should be shown to the user."
				},
				"githubPullRequests.fileListLayout": {
					"type": "string",
					"enum": [
						"flat",
						"tree"
					],
					"default": "tree",
					"description": "The layout to use when displaying changed files list."
				},
				"githubPullRequests.defaultDeletionMethod.selectLocalBranch": {
					"type": "boolean",
					"default": true,
					"description": "When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request."
				},
				"githubPullRequests.defaultDeletionMethod.selectRemote": {
					"type": "boolean",
					"default": true,
					"description": "When true, the option to delete the remote will be selected by default when deleting a branch from a pull request."
				},
				"githubPullRequests.terminalLinksHandler": {
					"type": "string",
					"enum": [
						"github",
						"vscode",
						"ask"
					],
					"enumDescriptions": [
						"Create the pull request on GitHub",
						"Create the pull request in VS Code",
						"Ask which method to use"
					],
					"default": "ask",
					"description": "Default handler for terminal links."
				},
				"githubPullRequests.createOnPublishBranch": {
					"type": "string",
					"enum": [
						"never",
						"ask"
					],
					"enumDescriptions": [
						"Never create a pull request when a branch is published.",
						"Ask if you want to create a pull request when a branch is published."
					],
					"default": "ask",
					"description": "Create a pull request when a branch is published."
				},
				"githubPullRequests.commentExpandState": {
					"type": "string",
					"enum": [
						"expandUnresolved",
						"collapseAll"
					],
					"enumDescriptions": [
						"All unresolved comments will be expanded.",
						"All comments will be collapsed"
					],
					"default": "expandUnresolved",
					"description": "Controls whether comments are expanded when a document with comments is opened."
				},
				"githubPullRequests.useReviewMode": {
					"type": "object",
					"description": "Choose which pull request states will use review mode. \"Open\" pull requests will always use review mode.",
					"additionalProperties": false,
					"properties": {
						"merged": {
							"type": "boolean",
							"description": "Use review mode for merged pull requests.",
							"default": true
						},
						"closed": {
							"type": "boolean",
							"description": "Use review mode for closed pull requests. Merged pull requests are not considered \"closed\".",
							"default": false
						}
					},
					"required": [
						"merged",
						"closed"
					],
					"default": {
						"merged": true,
						"closed": false
					}
				},
				"githubPullRequests.assignCreated": {
					"type": "string",
					"description": "All pull requests created with this extension will be assigned to this user. To assign to yourself, use the '${user}' variable."
				},
				"githubPullRequests.pushBranch": {
					"type": "string",
					"enum": [
						"prompt",
						"always"
					],
					"default": "prompt",
					"enumDescriptions": [
						"Prompt to push the branch when creating a PR and the \"from\" branch is not available on the remote.",
						"Always push the branch when creating a PR and the \"from\" branch is not available on the remote."
					],
					"description": "Push the \"from\" branch when creating a PR and the \"from\" branch is not available on the remote."
				},
				"githubPullRequests.pullBranch": {
					"type": "string",
					"enum": [
						"prompt",
						"never",
						"always"
					],
					"default": "prompt",
					"markdownEnumDescriptions": [
						"Prompt to pull a PR branch when changes are detected in the PR.",
						"Never pull a PR branch when changes are detected in the PR.",
						"Always pull a PR branch when changes are detected in the PR. When `\"git.autoStash\": true` this will instead `prompt` to prevent unexpected file changes."
					],
					"description": "Pull changes from the remote when a PR branch is checked out locally. Changes are detected when the PR is manually refreshed and during periodic background updates."
				},
				"githubPullRequests.ignoredPullRequestBranches": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string",
						"description": "Branch name"
					},
					"description": "Prevents branches that are associated with a pull request from being automatically detected. This will prevent review mode from being entered on these branches."
				},
				"githubPullRequests.overrideDefaultBranch": {
					"type": "string",
					"description": "The default branch for a repository is set on github.com. With this setting, you can override that default with another branch."
				},
				"githubPullRequests.postCreate": {
					"type": "string",
					"enum": [
						"none",
						"openOverview"
					],
					"description": "The action to take after creating a pull request.",
					"default": "openOverview",
					"enumDescriptions": [
						"No action",
						"Open the overview page of the pull request"
					]
				},
				"githubIssues.ignoreMilestones": {
					"type": "array",
					"default": [],
					"description": "An array of milestones titles to never show issues from."
				},
				"githubIssues.createIssueTriggers": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "String that enables the 'Create issue from comment' code action. Should not contain whitespace."
					},
					"default": [
						"TODO",
						"todo",
						"BUG",
						"FIXME",
						"ISSUE",
						"HACK"
					],
					"description": "Strings that will cause the 'Create issue from comment' code action to show."
				},
				"githubIssues.createInsertFormat": {
					"type": "string",
					"enum": [
						"number",
						"url"
					],
					"default": "number",
					"description": "Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run."
				},
				"githubIssues.issueCompletions.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether completion suggestions are shown for issues."
				},
				"githubIssues.userCompletions.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Controls whether completion suggestions are shown for users."
				},
				"githubIssues.ignoreCompletionTrigger": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "Language that issue completions should not trigger on '#'."
					},
					"default": [
						"coffeescript",
						"diff",
						"dockerfile",
						"dockercompose",
						"ignore",
						"ini",
						"julia",
						"makefile",
						"perl",
						"powershell",
						"python",
						"r",
						"ruby",
						"shellscript",
						"yaml"
					],
					"description": "Languages that the '#' character should not be used to trigger issue completion suggestions."
				},
				"githubIssues.ignoreUserCompletionTrigger": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "Language that user completions should not trigger on '@'."
					},
					"default": [
						"python"
					],
					"description": "Languages that the '@' character should not be used to trigger user completion suggestions."
				},
				"githubIssues.issueBranchTitle": {
					"type": "string",
					"default": "${user}/issue${issueNumber}",
					"markdownDescription": "Advanced settings for the name of the branch that is created when you start working on an issue. \n- `${user}` will be replace with the currently logged in username \n- `${issueNumber}` will be replaced with the current issue number \n- `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters (https://git-scm.com/docs/git-check-ref-format) removed"
				},
				"githubIssues.useBranchForIssues": {
					"type": "string",
					"enum": [
						"on",
						"off",
						"prompt"
					],
					"enumDescriptions": [
						"A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.",
						"A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.",
						"A prompt will show for setting the name of the branch that will be created and checked out."
					],
					"default": "on",
					"description": "Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`."
				},
				"githubIssues.issueCompletionFormatScm": {
					"type": "string",
					"default": "${issueTitle} ${issueNumberLabel}",
					"markdownDescription": "Sets the format of issue completions in the SCM inputbox. \n- `${user}` will be replace with the currently logged in username \n- `${issueNumber}` will be replaced with the current issue number \n- `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository"
				},
				"githubIssues.workingIssueFormatScm": {
					"type": "string",
					"default": "${issueTitle} \nFixes ${issueNumberLabel}",
					"markdownDescription": "Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} \nFixes #${issueNumber}`",
					"editPresentation": "multilineText"
				},
				"githubIssues.queries": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"label": {
								"type": "string",
								"description": "The label to display for the query in the Issues tree."
							},
							"query": {
								"type": "string",
								"markdownDescription": "The search query using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The variable `${user}` can be used to specify the logged in user within a search. `${owner}` and `${repository}` can be used to specify the repository by using `repo:${owner}/${repository}`."
							}
						}
					},
					"scope": "resource",
					"markdownDescription": "Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The \"default\" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.",
					"default": [
						{
							"label": "My Issues",
							"query": "default"
						},
						{
							"label": "Created Issues",
							"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
						},
						{
							"label": "Recent Issues",
							"query": "state:open repo:${owner}/${repository} sort:updated-desc"
						}
					]
				},
				"githubIssues.assignWhenWorking": {
					"type": "boolean",
					"default": true,
					"description": "Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open."
				},
				"githubPullRequests.focusedMode": {
					"type": "boolean",
					"description": "Whether to enter focused mode when a pull request is checked out. This hides the issues and pull requests tree views.",
					"default": true
				}
			}
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "github-pull-requests",
					"title": "GitHub",
					"icon": "$(github)"
				},
				{
					"id": "github-pull-request",
					"title": "GitHub Pull Request",
					"icon": "$(git-pull-request)"
				}
			]
		},
		"views": {
			"github-pull-requests": [
				{
					"id": "github:login",
					"name": "Login",
					"when": "ReposManagerStateContext == NeedsAuthentication",
					"icon": "$(git-pull-request)"
				},
				{
					"id": "pr:github",
					"name": "Pull Requests",
					"when": "ReposManagerStateContext != NeedsAuthentication",
					"icon": "$(git-pull-request)"
				},
				{
					"id": "issues:github",
					"name": "Issues",
					"when": "ReposManagerStateContext != NeedsAuthentication",
					"icon": "$(issues)"
				}
			],
			"github-pull-request": [
				{
					"id": "github:createPullRequest",
					"type": "webview",
					"name": "Create Pull Request",
					"when": "github:createPullRequest",
					"visibility": "visible",
					"initialSize": 2
				},
				{
					"id": "github:compareChanges",
					"name": "Compare Changes",
					"when": "github:createPullRequest",
					"visibility": "visible",
					"initialSize": 1
				},
				{
					"id": "prStatus:github",
					"name": "Changes In Pull Request",
					"when": "github:inReviewMode && !github:createPullRequest",
					"icon": "$(git-pull-request)",
					"visibility": "visible",
					"initialSize": 3
				},
				{
					"id": "github:activePullRequest",
					"type": "webview",
					"name": "Active Pull Request",
					"when": "github:inReviewMode && github:focusedReview && !github:createPullRequest && github:activePRCount <= 1",
					"initialSize": 2
				},
				{
					"id": "github:activePullRequest:welcome",
					"name": "Active Pull Request",
					"when": "!github:stateValidated && github:focusedReview"
				}
			]
		},
		"commands": [
			{
				"command": "github.api.preloadPullRequest",
				"title": "Preload Pull Request",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.create",
				"title": "Create Pull Request",
				"icon": "$(git-pull-request-create)",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.pick",
				"title": "Checkout Pull Request",
				"category": "GitHub Pull Requests",
				"icon": "$(arrow-right)"
			},
			{
				"command": "pr.exit",
				"title": "Checkout Default Branch",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.dismissNotification",
				"title": "Dismiss Notification",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.merge",
				"title": "Merge Pull Request",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.readyForReview",
				"title": "Mark Pull Request Ready For Review",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.close",
				"title": "Close Pull Request",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.openPullRequestOnGitHub",
				"title": "Open Pull Request on GitHub",
				"category": "GitHub Pull Requests",
				"icon": "$(globe)"
			},
			{
				"command": "pr.openAllDiffs",
				"title": "Open All Diffs",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.refreshPullRequest",
				"title": "Refresh Pull Request",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.openFileOnGitHub",
				"title": "Open File on GitHub",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.copyCommitHash",
				"title": "Copy Commit Hash",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.openOriginalFile",
				"title": "Open Original File",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.openModifiedFile",
				"title": "Open Modified File",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.openDiffView",
				"title": "Open Diff View",
				"category": "GitHub Pull Requests",
				"icon": "$(compare-changes)"
			},
			{
				"command": "pr.openDescription",
				"title": "View Pull Request Description",
				"category": "GitHub Pull Requests",
				"when": "github:inReviewMode",
				"icon": "$(note)"
			},
			{
				"command": "pr.openDescriptionToTheSide",
				"title": "Open Pull Request Description to the Side",
				"icon": "$(split-horizontal)"
			},
			{
				"command": "pr.refreshDescription",
				"title": "Refresh Pull Request Description",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.showDiffSinceLastReview",
				"title": "Show Changes Since Last Review",
				"icon": "$(git-pull-request-new-changes)"
			},
			{
				"command": "pr.showDiffAll",
				"title": "Show All Changes",
				"icon": "$(git-pull-request-go-to-changes)"
			},
			{
				"command": "pr.checkoutByNumber",
				"title": "Checkout Pull Request by Number",
				"category": "GitHub Pull Requests",
				"icon": "$(symbol-numeric)"
			},
			{
				"command": "review.openFile",
				"title": "Open File",
				"icon": "$(go-to-file)"
			},
			{
				"command": "review.openLocalFile",
				"title": "Open File",
				"icon": "$(go-to-file)"
			},
			{
				"command": "review.suggestDiff",
				"title": "Suggest Edit",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.refreshList",
				"title": "Refresh Pull Requests List",
				"icon": "$(refresh)",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.setFileListLayoutAsTree",
				"title": "Toggle View Mode",
				"icon": "$(list-tree)",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.setFileListLayoutAsFlat",
				"title": "Toggle View Mode",
				"icon": "$(list-flat)",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.refreshChanges",
				"title": "Refresh",
				"icon": "$(refresh)",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.configurePRViewlet",
				"title": "Configure...",
				"category": "GitHub Pull Requests",
				"icon": "$(gear)"
			},
			{
				"command": "pr.deleteLocalBranch",
				"title": "Delete Local Branch",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.signin",
				"title": "Sign in to GitHub",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.deleteLocalBranchesNRemotes",
				"title": "Delete local branches and remotes",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.createComment",
				"title": "Add Comment",
				"category": "GitHub Pull Requests",
				"enablement": "!commentIsEmpty"
			},
			{
				"command": "pr.createSingleComment",
				"title": "Add Comment",
				"category": "GitHub Pull Requests",
				"enablement": "!commentIsEmpty"
			},
			{
				"command": "pr.startReview",
				"title": "Start Review",
				"category": "GitHub Pull Requests",
				"enablement": "!commentIsEmpty"
			},
			{
				"command": "pr.editComment",
				"title": "Edit Comment",
				"category": "GitHub Pull Requests",
				"icon": "$(edit)"
			},
			{
				"command": "pr.cancelEditComment",
				"title": "Cancel",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.saveComment",
				"title": "Save",
				"category": "GitHub Pull Requests",
				"enablement": "!commentIsEmpty"
			},
			{
				"command": "pr.deleteComment",
				"title": "Delete Comment",
				"category": "GitHub Pull Requests",
				"icon": "$(trash)"
			},
			{
				"command": "pr.resolveReviewThread",
				"title": "Resolve Conversation",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.unresolveReviewThread",
				"title": "Unresolve Conversation",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.signinAndRefreshList",
				"title": "Sign in and Refresh",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.configureRemotes",
				"title": "Configure Remotes...",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.refreshActivePullRequest",
				"title": "Refresh",
				"category": "GitHub Pull Requests",
				"icon": "$(refresh)"
			},
			{
				"command": "pr.markFileAsViewed",
				"title": "Mark File As Viewed",
				"category": "GitHub Pull Requests",
				"icon": "$(pass)"
			},
			{
				"command": "pr.unmarkFileAsViewed",
				"title": "Mark File As Not Viewed",
				"category": "GitHub Pull Requests",
				"icon": "$(pass-filled)"
			},
			{
				"command": "pr.openReview",
				"title": "Go to Review",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "pr.collapseAllComments",
				"title": "Collapse All Comments",
				"category": "Comments",
				"icon": "$(collapse-all)"
			},
			{
				"command": "pr.editQuery",
				"title": "Edit Query",
				"category": "GitHub Pull Requests",
				"icon": "$(edit)"
			},
			{
				"command": "pr.openPullsWebsite",
				"title": "Open on GitHub",
				"category": "GitHub Pull Requests",
				"icon": "$(globe)"
			},
			{
				"command": "pr.resetViewedFiles",
				"title": "Reset Viewed Files",
				"category": "GitHub Pull Requests"
			},
			{
				"command": "issue.createIssueFromSelection",
				"title": "Create Issue From Selection",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.createIssueFromClipboard",
				"title": "Create Issue From Clipboard",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.copyGithubPermalink",
				"title": "Copy GitHub Permalink",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.copyGithubHeadLink",
				"title": "Copy GitHub Head Link",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.copyMarkdownGithubPermalink",
				"title": "Copy GitHub Permalink as Markdown",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.openGithubPermalink",
				"title": "Open Permalink on GitHub",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.openIssue",
				"title": "Open Issue on GitHub",
				"category": "GitHub Issues",
				"icon": "$(globe)"
			},
			{
				"command": "issue.copyIssueNumber",
				"title": "Copy Number",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.copyIssueUrl",
				"title": "Copy Url",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.refresh",
				"title": "Refresh",
				"category": "GitHub Issues",
				"icon": "$(refresh)"
			},
			{
				"command": "issue.suggestRefresh",
				"title": "Refresh Suggestions",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.startWorking",
				"title": "Start Working on Issue",
				"category": "GitHub Issues",
				"icon": "$(arrow-right)"
			},
			{
				"command": "issue.startWorkingBranchDescriptiveTitle",
				"title": "Start Working on Issue and Checkout Topic Branch",
				"category": "GitHub Issues",
				"icon": "$(arrow-right)"
			},
			{
				"command": "issue.continueWorking",
				"title": "Continue Working on Issue",
				"category": "GitHub Issues",
				"icon": "$(arrow-right)"
			},
			{
				"command": "issue.startWorkingBranchPrompt",
				"title": "Start Working and Set Branch...",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.stopWorking",
				"title": "Stop Working on Issue",
				"category": "GitHub Issues",
				"icon": "$(primitive-square)"
			},
			{
				"command": "issue.stopWorkingBranchDescriptiveTitle",
				"title": "Stop Working on Issue and Leave Topic Branch",
				"category": "GitHub Issues",
				"icon": "$(primitive-square)"
			},
			{
				"command": "issue.statusBar",
				"title": "Current Issue Options",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.getCurrent",
				"title": "Get current issue",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.editQuery",
				"title": "Edit Query",
				"category": "GitHub Issues",
				"icon": "$(edit)"
			},
			{
				"command": "issue.createIssue",
				"title": "Create an Issue",
				"category": "GitHub Issues",
				"icon": "$(plus)"
			},
			{
				"command": "issue.createIssueFromFile",
				"title": "Create Issue",
				"icon": "$(check)",
				"enablement": "!issues.creatingFromFile"
			},
			{
				"command": "issue.issueCompletion",
				"title": "Issue Completion Chosen"
			},
			{
				"command": "issue.userCompletion",
				"title": "User Completion Chosen"
			},
			{
				"command": "issue.signinAndRefreshList",
				"title": "Sign in and Refresh",
				"category": "GitHub Issues"
			},
			{
				"command": "issue.goToLinkedCode",
				"title": "Go to Linked Code",
				"category": "GitHub Issues"
			},
			{
				"command": "issues.openIssuesWebsite",
				"title": "Open on GitHub",
				"category": "GitHub Pull Requests",
				"icon": "$(globe)"
			}
		],
		"viewsWelcome": [
			{
				"view": "github:login",
				"when": "ReposManagerStateContext == NeedsAuthentication",
				"contents": "You have not yet signed in with GitHub\n[Sign in](command:pr.signin)"
			},
			{
				"view": "github:compareChanges",
				"when": "github:noUpstream",
				"contents": "The comparing branch has no upstream remote\n[Publish branch](command:git.publish)"
			},
			{
				"view": "pr:github",
				"when": "git.state != initialized && !github:initialized && workspaceFolderCount > 0",
				"contents": "Loading..."
			},
			{
				"view": "pr:github",
				"when": "!github:initialized && workspaceFolderCount == 0",
				"contents": "You have not yet opened a folder."
			},
			{
				"view": "pr:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0",
				"contents": "No git repositories found"
			},
			{
				"view": "issues:github",
				"when": "git.state != initialized && !github:initialized && workspaceFolderCount > 0",
				"contents": "Loading..."
			},
			{
				"view": "issues:github",
				"when": "!github:initialized && workspaceFolderCount == 0",
				"contents": "You have not yet opened a folder."
			},
			{
				"view": "issues:github",
				"when": "git.state == initialized && gitOpenRepositoryCount == 0",
				"contents": "No git repositories found"
			},
			{
				"view": "github:activePullRequest:welcome",
				"when": "!github:stateValidated",
				"contents": "Loading..."
			}
		],
		"keybindings": [
			{
				"key": "ctrl+shift+space",
				"command": "issue.suggestRefresh",
				"when": "suggestWidgetVisible"
			},
			{
				"key": "ctrl+s",
				"mac": "cmd+s",
				"command": "issue.createIssueFromFile",
				"when": "resourceScheme == newIssue && config.files.autoSave != off"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "github.api.preloadPullRequest",
					"when": "false"
				},
				{
					"command": "pr.configureRemotes",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.configurePRViewlet",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "pr.pick",
					"when": "false"
				},
				{
					"command": "pr.exit",
					"when": "github:inReviewMode"
				},
				{
					"command": "pr.dismissNotification",
					"when": "false"
				},
				{
					"command": "pr.resetViewedFiles",
					"when": "github:inReviewMode"
				},
				{
					"command": "review.openFile",
					"when": "false"
				},
				{
					"command": "review.openLocalFile",
					"when": "false"
				},
				{
					"command": "pr.close",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.create",
					"when": "gitHubOpenRepositoryCount != 0 && github:authenticated"
				},
				{
					"command": "pr.merge",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.readyForReview",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openAllDiffs",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.refreshDescription",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.openFileOnGitHub",
					"when": "false"
				},
				{
					"command": "pr.openOriginalFile",
					"when": "false"
				},
				{
					"command": "pr.openModifiedFile",
					"when": "false"
				},
				{
					"command": "pr.refreshPullRequest",
					"when": "false"
				},
				{
					"command": "pr.deleteLocalBranch",
					"when": "false"
				},
				{
					"command": "pr.openDiffView",
					"when": "false"
				},
				{
					"command": "pr.openDescriptionToTheSide",
					"when": "false"
				},
				{
					"command": "pr.openDescription",
					"when": "gitHubOpenRepositoryCount != 0 && github:inReviewMode"
				},
				{
					"command": "pr.showDiffSinceLastReview",
					"when": "false"
				},
				{
					"command": "pr.showDiffAll",
					"when": "false"
				},
				{
					"command": "pr.refreshList",
					"when": "gitHubOpenRepositoryCount != 0 && github:authenticated && github:hasGitHubRemotes"
				},
				{
					"command": "pr.setFileListLayoutAsTree",
					"when": "false"
				},
				{
					"command": "pr.setFileListLayoutAsFlat",
					"when": "false"
				},
				{
					"command": "pr.refreshChanges",
					"when": "false"
				},
				{
					"command": "pr.signin",
					"when": "gitHubOpenRepositoryCount != 0 && github:hasGitHubRemotes"
				},
				{
					"command": "pr.signinAndRefreshList",
					"when": "false"
				},
				{
					"command": "pr.copyCommitHash",
					"when": "false"
				},
				{
					"command": "pr.createComment",
					"when": "false"
				},
				{
					"command": "pr.createSingleComment",
					"when": "false"
				},
				{
					"command": "pr.startReview",
					"when": "false"
				},
				{
					"command": "pr.editComment",
					"when": "false"
				},
				{
					"command": "pr.cancelEditComment",
					"when": "false"
				},
				{
					"command": "pr.saveComment",
					"when": "false"
				},
				{
					"command": "pr.deleteComment",
					"when": "false"
				},
				{
					"command": "pr.openReview",
					"when": "false"
				},
				{
					"command": "pr.editQuery",
					"when": "false"
				},
				{
					"command": "pr.markFileAsViewed",
					"when": "false"
				},
				{
					"command": "pr.unmarkFileAsViewed",
					"when": "false"
				},
				{
					"command": "pr.checkoutByNumber",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && github:authenticated"
				},
				{
					"command": "pr.collapseAllComments",
					"when": "false"
				},
				{
					"command": "issue.openIssue",
					"when": "false"
				},
				{
					"command": "issue.copyIssueNumber",
					"when": "false"
				},
				{
					"command": "issue.copyIssueUrl",
					"when": "false"
				},
				{
					"command": "issue.refresh",
					"when": "false"
				},
				{
					"command": "issue.suggestRefresh",
					"when": "false"
				},
				{
					"command": "issue.startWorking",
					"when": "false"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"when": "false"
				},
				{
					"command": "issue.continueWorking",
					"when": "false"
				},
				{
					"command": "issue.startWorkingBranchPrompt",
					"when": "false"
				},
				{
					"command": "issue.stopWorking",
					"when": "false"
				},
				{
					"command": "issue.stopWorkingBranchDescriptiveTitle",
					"when": "false"
				},
				{
					"command": "issue.statusBar",
					"when": "false"
				},
				{
					"command": "issue.getCurrent",
					"when": "false"
				},
				{
					"command": "issue.editQuery",
					"when": "false"
				},
				{
					"command": "issue.createIssue",
					"when": "github:hasGitHubRemotes && github:authenticated"
				},
				{
					"command": "issue.createIssueFromFile",
					"when": "false"
				},
				{
					"command": "issue.issueCompletion",
					"when": "false"
				},
				{
					"command": "issue.userCompletion",
					"when": "false"
				},
				{
					"command": "issue.signinAndRefreshList",
					"when": "false"
				},
				{
					"command": "issue.goToLinkedCode",
					"when": "false"
				},
				{
					"command": "pr.refreshActivePullRequest",
					"when": "false"
				},
				{
					"command": "pr.openPullsWebsite",
					"when": "github:hasGitHubRemotes"
				},
				{
					"command": "issues.openIssuesWebsite",
					"when": "github:hasGitHubRemotes"
				}
			],
			"github.pullRequests.overflow": [
				{
					"command": "pr.openPullsWebsite",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized",
					"group": "navigation@1"
				},
				{
					"command": "pr.checkoutByNumber",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized",
					"group": "navigation@2"
				},
				{
					"command": "pr.configurePRViewlet",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized",
					"group": "navigation@3"
				}
			],
			"github.issues.overflow": [
				{
					"command": "issues.openIssuesWebsite",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized",
					"group": "navigation@1"
				},
				{
					"command": "pr.configurePRViewlet",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized",
					"group": "navigation@2"
				}
			],
			"view/title": [
				{
					"command": "pr.create",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github",
					"group": "navigation@1"
				},
				{
					"command": "pr.refreshList",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github",
					"group": "navigation@2"
				},
				{
					"submenu": "github.pullRequests.overflow",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == pr:github",
					"group": "navigation@3"
				},
				{
					"command": "pr.refreshChanges",
					"when": "view == prStatus:github",
					"group": "navigation@2"
				},
				{
					"command": "pr.setFileListLayoutAsTree",
					"when": "view == prStatus:github && fileListLayout:flat",
					"group": "navigation"
				},
				{
					"command": "pr.setFileListLayoutAsFlat",
					"when": "view == prStatus:github && !fileListLayout:flat",
					"group": "navigation"
				},
				{
					"command": "issue.createIssue",
					"when": "view == issues:github && github:hasGitHubRemotes",
					"group": "navigation@1"
				},
				{
					"command": "issue.refresh",
					"when": "view == issues:github",
					"group": "navigation@2"
				},
				{
					"submenu": "github.issues.overflow",
					"when": "gitHubOpenRepositoryCount != 0 && github:initialized && view == issues:github",
					"group": "navigation@3"
				},
				{
					"command": "pr.refreshActivePullRequest",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes",
					"group": "navigation@1"
				},
				{
					"command": "pr.openDescription",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes",
					"group": "navigation@2"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"when": "view == github:activePullRequest && github:hasGitHubRemotes",
					"group": "navigation@3"
				}
			],
			"view/item/context": [
				{
					"command": "pr.pick",
					"when": "view == pr:github && viewItem =~ /pullrequest(:local)?:nonactive|description/",
					"group": "pullrequest@1"
				},
				{
					"command": "pr.pick",
					"when": "view == pr:github && viewItem =~ /description/",
					"group": "inline"
				},
				{
					"command": "pr.exit",
					"when": "view == pr:github && viewItem =~ /pullrequest(:local)?:active|description/",
					"group": "pullrequest@1"
				},
				{
					"command": "pr.refreshPullRequest",
					"when": "view == pr:github && viewItem =~ /pullrequest|description/",
					"group": "pullrequest@2"
				},
				{
					"command": "pr.openPullRequestOnGitHub",
					"when": "view == pr:github && viewItem =~ /pullrequest|description/",
					"group": "pullrequest@3"
				},
				{
					"command": "pr.deleteLocalBranch",
					"when": "view == pr:github && viewItem =~ /pullrequest:local:nonactive/",
					"group": "pullrequest@4"
				},
				{
					"command": "pr.dismissNotification",
					"when": "view == pr:github && viewItem =~ /pullrequest(.*):notification/",
					"group": "pullrequest@5"
				},
				{
					"command": "pr.openFileOnGitHub",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange/"
				},
				{
					"command": "pr.copyCommitHash",
					"when": "view == prStatus:github && viewItem =~ /commit/"
				},
				{
					"command": "pr.openDescriptionToTheSide",
					"group": "inline",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description/"
				},
				{
					"command": "pr.showDiffSinceLastReview",
					"group": "inline",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description:changesSinceReview:inactive/"
				},
				{
					"command": "pr.showDiffAll",
					"group": "inline",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /description:changesSinceReview:active/"
				},
				{
					"command": "review.openFile",
					"group": "inline@0",
					"when": "openDiffOnClick && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "pr.openDiffView",
					"group": "inline@0",
					"when": "!openDiffOnClick && view == prStatus:github && viewItem =~ /filechange(?!:DELETE)/"
				},
				{
					"command": "pr.openOriginalFile",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange:MODIFY/"
				},
				{
					"command": "pr.openModifiedFile",
					"when": "view =~ /(pr|prStatus):github/ && viewItem =~ /filechange:MODIFY/"
				},
				{
					"command": "pr.editQuery",
					"when": "view == pr:github && viewItem == query",
					"group": "inline"
				},
				{
					"command": "pr.editQuery",
					"when": "view == pr:github && viewItem == query"
				},
				{
					"command": "issue.openIssue",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/",
					"group": "inline@2"
				},
				{
					"command": "issue.openIssue",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/",
					"group": "issues_0@1"
				},
				{
					"command": "issue.goToLinkedCode",
					"when": "view == issues:github && viewItem =~ /^link(current|continue)?issue/",
					"group": "issues_0@0"
				},
				{
					"command": "issue.startWorking",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/ && config.githubIssues.useBranchForIssues != on",
					"group": "inline@1"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/ && config.githubIssues.useBranchForIssues == on",
					"group": "inline@1"
				},
				{
					"command": "issue.startWorking",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/ && config.githubIssues.useBranchForIssues != on",
					"group": "inline@1"
				},
				{
					"command": "issue.startWorkingBranchDescriptiveTitle",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/ && config.githubIssues.useBranchForIssues == on",
					"group": "inline@1"
				},
				{
					"command": "issue.startWorking",
					"alt": "issue.startWorkingBranchPrompt",
					"when": "view == issues:github && viewItem =~ /^(link)?issue/",
					"group": "issues_0@2"
				},
				{
					"command": "issue.continueWorking",
					"when": "view == issues:github && viewItem =~ /^(link)?continueissue/",
					"group": "issues_0@2"
				},
				{
					"command": "pr.create",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/",
					"group": "issues_0@2"
				},
				{
					"command": "issue.stopWorking",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/",
					"group": "issues_0@3"
				},
				{
					"command": "issue.stopWorking",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/ && config.githubIssues.useBranchForIssues != on",
					"group": "inline@1"
				},
				{
					"command": "issue.stopWorkingBranchDescriptiveTitle",
					"when": "view == issues:github && viewItem =~ /^(link)?currentissue/ && config.githubIssues.useBranchForIssues == on",
					"group": "inline@1"
				},
				{
					"command": "issue.copyIssueNumber",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/",
					"group": "issues_1@1"
				},
				{
					"command": "issue.copyIssueUrl",
					"when": "view == issues:github && viewItem =~ /^(link)?(current|continue)?issue/",
					"group": "issues_1@2"
				},
				{
					"command": "issue.editQuery",
					"when": "view == issues:github && viewItem == query",
					"group": "inline"
				},
				{
					"command": "issue.editQuery",
					"when": "view == issues:github && viewItem == query"
				}
			],
			"editor/title": [
				{
					"command": "review.openFile",
					"group": "navigation",
					"when": "resourceScheme =~ /^review$/ && isInDiffEditor"
				},
				{
					"command": "review.openLocalFile",
					"group": "navigation",
					"when": "resourceScheme =~ /^review$/ && !isInDiffEditor"
				},
				{
					"command": "issue.createIssueFromFile",
					"group": "navigation",
					"when": "resourceFilename == NewIssue.md"
				},
				{
					"command": "pr.markFileAsViewed",
					"group": "navigation",
					"when": "resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:unviewedFiles"
				},
				{
					"command": "pr.unmarkFileAsViewed",
					"group": "navigation",
					"when": "resourceScheme != pr && resourceScheme != review && resourceScheme != filechange && resourcePath in github:viewedFiles"
				}
			],
			"scm/title": [
				{
					"command": "review.suggestDiff",
					"when": "scmProvider =~ /^git|^remoteHub:github/ && scmProviderRootUri in github:reposInReviewMode",
					"group": "inline"
				},
				{
					"command": "pr.create",
					"when": "scmProvider =~ /^git|^remoteHub:github/ && scmProviderRootUri in github:reposNotInReviewMode",
					"group": "navigation"
				}
			],
			"comments/commentThread/context": [
				{
					"command": "pr.createComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-browse/ && prInDraft"
				},
				{
					"command": "pr.createComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-review/ && reviewInDraftMode"
				},
				{
					"command": "pr.createSingleComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-browse/ && !prInDraft"
				},
				{
					"command": "pr.createSingleComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-review/ && !reviewInDraftMode"
				},
				{
					"command": "pr.startReview",
					"group": "inline@2",
					"when": "commentController =~ /^github-browse/ && !prInDraft"
				},
				{
					"command": "pr.startReview",
					"group": "inline@2",
					"when": "commentController =~ /^github-review/ && !reviewInDraftMode"
				},
				{
					"command": "pr.openReview",
					"group": "inline@3",
					"when": "commentController =~ /^github-browse/ && prInDraft"
				},
				{
					"command": "pr.openReview",
					"group": "inline@3",
					"when": "commentController =~ /^github-review/ && reviewInDraftMode"
				},
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canResolve"
				},
				{
					"command": "pr.unresolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canUnresolve"
				}
			],
			"comments/commentThread/title/context": [
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canResolve"
				},
				{
					"command": "pr.unresolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canUnresolve"
				}
			],
			"comments/commentThread/comment/context": [
				{
					"command": "pr.resolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canResolve"
				},
				{
					"command": "pr.unresolveReviewThread",
					"group": "inline@3",
					"when": "commentController =~ /^github-(browse|review)/ && commentThread == canUnresolve"
				}
			],
			"comments/comment/title": [
				{
					"command": "pr.editComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/ && comment =~ /canEdit/"
				},
				{
					"command": "pr.deleteComment",
					"group": "inline@2",
					"when": "commentController =~ /^github-(browse|review)/ && comment =~ /canDelete/"
				}
			],
			"comments/commentThread/title": [
				{
					"command": "pr.collapseAllComments",
					"group": "collapse@0",
					"when": "commentController =~ /^github-(browse|review)/"
				}
			],
			"comments/comment/context": [
				{
					"command": "pr.saveComment",
					"group": "inline@1",
					"when": "commentController =~ /^github-(browse|review)/"
				},
				{
					"command": "pr.cancelEditComment",
					"group": "inline@2",
					"when": "commentController =~ /^github-(browse|review)/"
				}
			],
			"editor/context/copy": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "3_githubPullRequests@0"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "3_githubPullRequests@1"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "3_githubPullRequests@2"
				}
			],
			"editor/context/share": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@0"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@1"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@2"
				}
			],
			"file/share": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@0"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@1"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_githubPullRequests@2"
				}
			],
			"editor/title/context": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_cutcopypaste@10"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "1_cutcopypaste@11"
				}
			],
			"explorer/context": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "5_cutcopypaste@10"
				},
				{
					"command": "issue.copyGithubHeadLink",
					"when": "gitHubOpenRepositoryCount != 0",
					"group": "5_cutcopypaste@11"
				}
			],
			"menuBar/edit/copy": [
				{
					"command": "issue.copyGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0"
				},
				{
					"command": "issue.copyMarkdownGithubPermalink",
					"when": "gitHubOpenRepositoryCount != 0"
				}
			],
			"remoteHub/pullRequest": [
				{
					"command": "pr.create",
					"when": "scmProvider =~ /^remoteHub:github/",
					"group": "1_modification@0"
				}
			]
		},
		"submenus": [
			{
				"id": "github.pullRequests.overflow",
				"label": "More actions...",
				"icon": "$(ellipsis)"
			},
			{
				"id": "github.issues.overflow",
				"label": "More actions...",
				"icon": "$(ellipsis)"
			}
		],
		"colors": [
			{
				"id": "issues.newIssueDecoration",
				"defaults": {
					"dark": "#ffffff48",
					"light": "#00000048",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground"
				},
				"description": "The color used for the assignees and labels fields in a new issue editor."
			},
			{
				"id": "issues.open",
				"defaults": {
					"dark": "#22863a",
					"light": "#22863a",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground"
				},
				"description": "The color used for indicating that an issue is open."
			},
			{
				"id": "issues.closed",
				"defaults": {
					"dark": "#cb2431",
					"light": "#cb2431",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground"
				},
				"description": "The color used for indicating that an issue is closed."
			},
			{
				"id": "pullRequests.notification",
				"defaults": {
					"dark": "notificationsInfoIcon.foreground",
					"light": "notificationsInfoIcon.foreground",
					"highContrast": "editor.foreground",
					"highContrastLight": "editor.foreground"
				},
				"description": "The color used for indicating a notification on a pull request"
			}
		],
		"resourceLabelFormatters": [
			{
				"scheme": "review",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"workspaceSuffix": "GitHub",
					"stripPathStartingSeparator": true
				}
			}
		]
	},
	"scripts": {
		"postinstall": "yarn update-dts",
		"bundle": "webpack --mode production --env esbuild",
		"bundle:node": "webpack --mode production --config-name extension:node --config-name webviews",
		"bundle:web": "webpack --mode production --config-name extension:webworker --config-name webviews",
		"clean": "rm -r dist/",
		"compile": "webpack --mode development --env esbuild",
		"compile:test": "tsc -p tsconfig.test.json",
		"compile:node": "webpack --mode development --config-name extension:node --config-name webviews",
		"compile:web": "webpack --mode development --config-name extension:webworker --config-name webviews",
		"lint": "eslint --fix --cache --config .eslintrc.json --ignore-pattern src/env/browser/**/* \"{src,webviews}/**/*.{ts,tsx}\"",
		"lint:browser": "eslint --fix --cache --cache-location .eslintcache.browser --config .eslintrc.browser.json --ignore-pattern src/env/node/**/* \"{src,webviews}/**/*.{ts,tsx}\"",
		"package": "npx vsce package --yarn",
		"pretty": "prettier --config .prettierrc --loglevel warn --write .",
		"test": "yarn run test:preprocess && node ./out/src/test/runTests.js",
		"test:preprocess": "yarn run compile:test && yarn run test:preprocess-gql && yarn run test:preprocess-svg",
		"browsertest:preprocess": "tsc ./src/test/browser/runTests.ts --outDir ./dist/browser/test --rootDir ./src/test/browser --target es6 --module commonjs",
		"browsertest": "yarn run browsertest:preprocess && node ./dist/browser/test/runTests.js",
		"test:preprocess-gql": "node scripts/preprocess-gql --in src/github/queries.gql --out out/src/github/queries.gql",
		"test:preprocess-svg": "node scripts/preprocess-svg --in ../resources/ --out out/resources",
		"update-dts": "cd \"src/@types\" && npx vscode-dts main && npx vscode-dts dev",
		"watch": "webpack --watch --mode development --env esbuild",
		"watch:web": "webpack --watch --mode development --config-name extension:webworker --config-name webviews",
		"hygiene": "node ./build/hygiene.js",
		"prepare": "husky install"
	},
	"devDependencies": {
		"@types/chai": "^4.1.4",
		"@types/glob": "7.1.3",
		"@types/lru-cache": "^5.1.0",
		"@types/marked": "^0.7.2",
		"@types/mocha": "^8.2.2",
		"@types/node": "12.12.70",
		"@types/react": "^16.8.4",
		"@types/react-dom": "^16.8.2",
		"@types/sinon": "7.0.11",
		"@types/temp": "0.8.34",
		"@types/vscode": "1.69.0",
		"@types/webpack-env": "^1.16.0",
		"@typescript-eslint/eslint-plugin": "4.18.0",
		"@typescript-eslint/parser": "4.18.0",
		"@vscode/test-electron": "^2.1.5",
		"@vscode/test-web": "^0.0.29",
		"assert": "^2.0.0",
		"buffer": "^6.0.3",
		"constants-browserify": "^1.0.0",
		"crypto-browserify": "3.12.0",
		"css-loader": "5.1.3",
		"esbuild-loader": "2.10.0",
		"eslint": "7.22.0",
		"eslint-cli": "1.1.1",
		"eslint-config-prettier": "8.1.0",
		"eslint-plugin-import": "2.22.1",
		"event-stream": "^4.0.1",
		"fork-ts-checker-webpack-plugin": "6.1.1",
		"glob": "7.1.6",
		"graphql": "15.5.0",
		"graphql-tag": "2.11.0",
		"gulp-filter": "^7.0.0",
		"husky": "^8.0.1",
		"jsdom": "19.0.0",
		"jsdom-global": "3.0.2",
		"json5": "2.2.0",
		"merge-options": "3.0.4",
		"minimist": "^1.2.6",
		"mkdirp": "1.0.4",
		"mocha": "^9.0.1",
		"mocha-junit-reporter": "1.23.0",
		"mocha-multi-reporters": "1.1.7",
		"os-browserify": "^0.3.0",
		"p-all": "^1.0.0",
		"path-browserify": "1.0.1",
		"prettier": "2.2.1",
		"process": "^0.11.10",
		"raw-loader": "4.0.2",
		"react-testing-library": "7.0.1",
		"sinon": "9.0.0",
		"source-map-support": "0.5.19",
		"stream-browserify": "^3.0.0",
		"style-loader": "2.0.0",
		"svg-inline-loader": "^0.8.2",
		"temp": "0.9.4",
		"terser-webpack-plugin": "5.1.1",
		"timers-browserify": "^2.0.12",
		"ts-loader": "8.0.18",
		"tty": "1.0.1",
		"typescript": "4.2.3",
		"typescript-formatter": "^7.2.2",
		"vinyl-fs": "^3.0.3",
		"webpack": "5.68.0",
		"webpack-cli": "4.2.0"
	},
	"dependencies": {
		"@octokit/rest": "18.2.0",
		"@octokit/types": "6.10.0",
		"@vscode/extension-telemetry": "0.6.2",
		"apollo-boost": "^0.4.9",
		"apollo-link-context": "1.0.20",
		"cross-fetch": "3.1.5",
		"dayjs": "1.10.4",
		"events": "3.2.0",
		"fast-deep-equal": "^3.1.3",
		"lru-cache": "6.0.0",
		"marked": "^4.0.10",
		"react": "^16.12.0",
		"react-dom": "^16.12.0",
		"ssh-config": "^2.0.0-alpha.3",
		"tunnel": "0.0.6",
		"uuid": "8.3.2",
		"vscode-tas-client": "^0.1.17",
		"vsls": "^0.3.967"
	},
	"license": "MIT"
}