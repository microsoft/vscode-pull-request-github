# /*---------------------------------------------------------------------------------------------
#  *  Copyright (c) Microsoft Corporation. All rights reserved.
#  *  Licensed under the MIT License. See License.txt in the project root for license information.
#  *--------------------------------------------------------------------------------------------*/

#import "./queriesShared.gql"

# Queries that are also in the limit file, but are not limited (by scope or API availability) here

fragment Node on Node {
	id
}

fragment Actor on Actor { # We don't want to reference Bot because it is not available on older GHE, so we use Actor instead as it gets us most of the way there.
	__typename
	login
	avatarUrl
	url
}

fragment User on User {
	__typename
	...Actor
	email
	name
	...Node
}

fragment Organization on Organization {
	__typename
	...Actor
	email
	name
	...Node
}

fragment Team on Team { # Team is not an Actor
	name
	avatarUrl
	url
	slug
	...Node
}

fragment Reactable on Reactable {
	reactionGroups {
		content
		viewerHasReacted
		reactors(first: 10) {
			nodes {
				... on User {
					login
				}
				... on Actor {
					login
				}
			}
			totalCount
		}
	}
}

fragment IssueBase on Issue {
	number
	url
	state
	stateReason
	body
	bodyHTML
	title
	titleHTML
	author {
		...Node
		...Actor
		...User
		...Organization
	}
	createdAt
	updatedAt
	milestone {
		title
		dueOn
		createdAt
		id
		number
	}
	assignees: assignedActors(first: 10) {
		nodes {
			...Node
			...Actor
			...User
		}
	}
	labels(first: 50) {
		nodes {
			name
			color
		}
	}
	id
	databaseId
	reactions(first: 100) {
		totalCount
	}
	...Reactable
	repository {
		name
		owner {
			login
		}
		url
	}
}

fragment IssueFragment on Issue {
	...IssueBase
	comments(first: 1) {
		totalCount
	}
}

fragment IssueWithCommentsFragment on Issue {
	...IssueBase
	comments(first: 50) {
		nodes {
			author {
				...Node
				...Actor
				...User
				...Organization
			}
			body
			databaseId
			reactions(first: 100) {
				totalCount
			}
		}
		totalCount
	}
}

fragment PullRequestFragment on PullRequest {
	number
	url
	state
	body
	bodyHTML
	title
	titleHTML
	author {
		...Node
		...Actor
		...User
		...Organization
	}
	createdAt
	updatedAt
	milestone {
		title
		dueOn
		createdAt
		id
		number
	}
	assignees: assignedActors(first: 10) {
		nodes {
			...Node
			...Actor
			...User
		}
	}
	labels(first: 50) {
		nodes {
			name
			color
		}
	}
	id
	databaseId
	reactions(first: 100) {
		totalCount
	}
	...Reactable
	comments(first: 1) {
		totalCount
	}

	comments(first: 1) {
		totalCount
	}

	commits(first: 50) {
		nodes {
			commit {
				message
			}
		}
	}
	headRef {
		...Ref
	}
	headRefName
	headRefOid
	headRepository {
		isInOrganization
		owner {
			login
		}
		url
	}
	baseRef {
		...Ref
	}
	baseRefName
	baseRefOid
	baseRepository {
		isInOrganization
		owner {
			login
		}
		url
		squashMergeCommitTitle
		squashMergeCommitMessage
		mergeCommitMessage
		mergeCommitTitle
	}
	merged
	mergeable
	mergeQueueEntry {
		...MergeQueueEntryFragment
	}
	mergeStateStatus
	autoMergeRequest {
		mergeMethod
	}
	reviewThreads {
		totalCount
	}
	viewerCanEnableAutoMerge
	viewerCanDisableAutoMerge
	viewerCanUpdate
	isDraft
	suggestedReviewers {
		isAuthor
		isCommenter
		reviewer {
			...Actor
			...User
			...Node
		}
	}
	additions
	deletions
}

query Issue($owner: String!, $name: String!, $number: Int!) {
	repository(owner: $owner, name: $name) {
		issue(number: $number) {
			...IssueFragment
		}
	}
	rateLimit {
		...RateLimit
	}
}

query IssueWithComments($owner: String!, $name: String!, $number: Int!) {
	repository(owner: $owner, name: $name) {
		issue(number: $number) {
			...IssueWithCommentsFragment
		}
	}
	rateLimit {
		...RateLimit
	}
}

query Issues($query: String!) {
	search(first: 100, type: ISSUE, query: $query) {
		issueCount
		pageInfo {
			hasNextPage
			endCursor
		}
		edges {
			node {
				...IssueFragment
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

query PullRequest($owner: String!, $name: String!, $number: Int!) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $number) {
			...PullRequestFragment
		}
	}
	rateLimit {
		...RateLimit
	}
}


query PullRequestForHead($owner: String!, $name: String!, $headRefName: String!) {
	repository(owner: $owner, name: $name) {
		pullRequests(first: 3, headRefName: $headRefName, orderBy: { field: CREATED_AT, direction: DESC }) {
			nodes {
				...PullRequestFragment
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

query PullRequestMergeabilityMergeRequirements($owner: String!, $name: String!, $number: Int!) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $number) {
			mergeable
			mergeStateStatus
			mergeRequirements { # This is a privage field we're testing
				state
				conditions {
					result
					... on PullRequestMergeConflictStateCondition {
						__typename
						conflicts
						isConflictResolvableInWeb
					}
				}
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

query LatestUpdates($owner: String!, $name: String!, $number: Int!, $since: DateTime!) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $number) {
			reactions(orderBy:{direction:DESC, field: CREATED_AT}, first: 1) {
				nodes {
					createdAt
				}
			}
			updatedAt
			comments(orderBy: {direction:DESC, field: UPDATED_AT}, first: 1) {
				nodes {
					updatedAt
					reactions(orderBy:{direction:DESC, field: CREATED_AT}, first: 1) {
						nodes {
							createdAt
						}
					}
				}
			}
			timelineItems(since: $since, first: 1) {
				nodes {
					... on AddedToMergeQueueEvent {
						createdAt
					}
					... on AddedToProjectEvent {
						createdAt
					}
					... on AssignedEvent {
						createdAt
					}
					... on AutoMergeDisabledEvent {
						createdAt
					}
					... on AutoMergeEnabledEvent {
						createdAt
					}
					... on AutoRebaseEnabledEvent {
						createdAt
					}
					... on AutoSquashEnabledEvent {
						createdAt
					}
					... on AutomaticBaseChangeFailedEvent {
						createdAt
					}
					... on AutomaticBaseChangeSucceededEvent {
						createdAt
					}
					... on BaseRefChangedEvent {
						createdAt
					}
					... on BaseRefDeletedEvent {
						createdAt
					}
					... on BaseRefForcePushedEvent {
						createdAt
					}
					... on ClosedEvent {
						createdAt
					}
					... on CommentDeletedEvent {
						createdAt
					}
					... on ConnectedEvent {
						createdAt
					}
					... on ConvertToDraftEvent {
						createdAt
					}
					... on ConvertedNoteToIssueEvent {
						createdAt
					}
					... on ConvertedToDiscussionEvent {
						createdAt
					}
					... on CrossReferencedEvent {
						createdAt
					}
					... on DemilestonedEvent {
						createdAt
					}
					... on DeployedEvent {
						createdAt
					}
					... on DeploymentEnvironmentChangedEvent {
						createdAt
					}
					... on DisconnectedEvent {
						createdAt
					}
					... on HeadRefDeletedEvent {
						createdAt
					}
					... on HeadRefForcePushedEvent {
						createdAt
					}
					... on HeadRefRestoredEvent {
						createdAt
					}
					... on IssueComment {
						createdAt
					}
					... on IssueTypeAddedEvent {
						createdAt
					}
					... on LabeledEvent {
						createdAt
					}
					... on LockedEvent {
						createdAt
					}
					... on MarkedAsDuplicateEvent {
						createdAt
					}
					... on MentionedEvent {
						createdAt
					}
					... on MergedEvent {
						createdAt
					}
					... on MilestonedEvent {
						createdAt
					}
					... on MovedColumnsInProjectEvent {
						createdAt
					}
					... on PinnedEvent {
						createdAt
					}
					... on PullRequestCommit {
						commit {
							committedDate
						}
					}
					... on PullRequestReview {
						createdAt
					}
					... on PullRequestReviewThread {
						comments(last: 1) {
							nodes {
								createdAt
							}
						}
					}
					... on PullRequestRevisionMarker {
						createdAt
					}
					... on ReadyForReviewEvent {
						createdAt
					}
					... on ReferencedEvent {
						createdAt
					}
					... on RemovedFromMergeQueueEvent {
						createdAt
					}
					... on RemovedFromProjectEvent {
						createdAt
					}
					... on RenamedTitleEvent {
						createdAt
					}
					... on ReopenedEvent {
						createdAt
					}
					... on ReviewDismissedEvent {
						createdAt
					}
					... on ReviewRequestRemovedEvent {
						createdAt
					}
					... on ReviewRequestedEvent {
						createdAt
					}
					... on SubscribedEvent {
						createdAt
					}
					... on TransferredEvent {
						createdAt
					}
					... on UnassignedEvent {
						createdAt
					}
					... on UnlabeledEvent {
						createdAt
					}
					... on UnlockedEvent {
						createdAt
					}
					... on UnmarkedAsDuplicateEvent {
						createdAt
					}
					... on UnpinnedEvent {
						createdAt
					}
					... on UnsubscribedEvent {
						createdAt
					}
					... on UserBlockedEvent {
						createdAt
					}
				}
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

query LatestIssueUpdates($owner: String!, $name: String!, $number: Int!, $since: DateTime!) {
	repository(owner: $owner, name: $name) {
		pullRequest: issue(number: $number) {
			reactions(orderBy:{direction:DESC, field: CREATED_AT}, first: 1) {
				nodes {
					createdAt
				}
			}
			updatedAt
			comments(orderBy: {direction:DESC, field: UPDATED_AT}, first: 1) {
				nodes {
					updatedAt
					reactions(orderBy:{direction:DESC, field: CREATED_AT}, first: 1) {
						nodes {
							createdAt
						}
					}
				}
			}
			timelineItems(since: $since, first: 1) {
				nodes {
					... on AddedToProjectEvent {
						createdAt
					}
					... on AssignedEvent {
						createdAt
					}
					... on ClosedEvent {
						createdAt
					}
					... on CommentDeletedEvent {
						createdAt
					}
					... on ConnectedEvent {
						createdAt
					}
					... on ConvertedNoteToIssueEvent {
						createdAt
					}
					... on ConvertedToDiscussionEvent {
						createdAt
					}
					... on CrossReferencedEvent {
						createdAt
					}
					... on DemilestonedEvent {
						createdAt
					}
					... on DisconnectedEvent {
						createdAt
					}
					... on IssueComment {
						createdAt
					}
					... on IssueTypeAddedEvent {
						createdAt
					}
					... on LabeledEvent {
						createdAt
					}
					... on LockedEvent {
						createdAt
					}
					... on MarkedAsDuplicateEvent {
						createdAt
					}
					... on MentionedEvent {
						createdAt
					}
					... on MilestonedEvent {
						createdAt
					}
					... on MovedColumnsInProjectEvent {
						createdAt
					}
					... on PinnedEvent {
						createdAt
					}
					... on ReferencedEvent {
						createdAt
					}
					... on RemovedFromProjectEvent {
						createdAt
					}
					... on RenamedTitleEvent {
						createdAt
					}
					... on ReopenedEvent {
						createdAt
					}
					... on SubscribedEvent {
						createdAt
					}
					... on TransferredEvent {
						createdAt
					}
					... on UnassignedEvent {
						createdAt
					}
					... on UnlabeledEvent {
						createdAt
					}
					... on UnlockedEvent {
						createdAt
					}
					... on UnmarkedAsDuplicateEvent {
						createdAt
					}
					... on UnpinnedEvent {
						createdAt
					}
					... on UnsubscribedEvent {
						createdAt
					}
					... on UserBlockedEvent {
						createdAt
					}
				}
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

query GetAssignableUsers($owner: String!, $name: String!, $first: Int!, $after: String) {
	repository(owner: $owner, name: $name) {
		assignableUsers(first: $first, after: $after) {
			nodes {
				...User
			}
			pageInfo {
				hasNextPage
				endCursor
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

mutation CreatePullRequest($input: CreatePullRequestInput!) {
	createPullRequest(input: $input) {
		pullRequest {
			...PullRequestFragment
		}
	}
}

mutation RevertPullRequest($input: RevertPullRequestInput!) {
	revertPullRequest(input: $input) {
		revertPullRequest {
			...PullRequestFragment
		}
	}
}

# Queries that only exist in this file and in extra

query GetSuggestedActors($owner: String!, $name: String!, $capabilities: [RepositorySuggestedActorFilter!]!, $first: Int!, $after: String) {
	repository(owner: $owner, name: $name) {
		suggestedActors(first: $first, after: $after, capabilities: $capabilities) {
			nodes {
				...Node
				...Actor
				...User
			}
			pageInfo {
				hasNextPage
				endCursor
			}
		}
	}
	rateLimit {
		...RateLimit
	}
}

mutation DequeuePullRequest($input: DequeuePullRequestInput!) {
	dequeuePullRequest(input: $input) {
		mergeQueueEntry {
			...MergeQueueEntryFragment
		}
	}
}

mutation EnqueuePullRequest($input: EnqueuePullRequestInput!) {
	enqueuePullRequest(input: $input) {
		mergeQueueEntry {
			...MergeQueueEntryFragment
		}
	}
}

mutation ReplaceActorsForAssignable($input: ReplaceActorsForAssignableInput!) {
	replaceActorsForAssignable(input: $input) {
		assignable {
			assignees: assignedActors(first: 100) {
				nodes {
					...Node
					...Actor
					...User
				}
				pageInfo {
					hasNextPage
					endCursor
				}
			}
		}
	}
}